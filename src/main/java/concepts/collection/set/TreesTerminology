                      a
 				  /       \   
               	b       	 c
           	 /    \       /  |  \
            d	   e 	 f   g   i
                                  \
                                   j
           
Trees terminology:

 - Each tree must have exactly one node, called the root, from which all nodes of the tree extend (and which has no parent of its own). 
 - The other end of the tree, the last level down contains the leaf nodes of the tree.
 - The number of lines you pass through when you travel from the root until you reach a particular node is the depth of that node in the tree
 - The height of the tree is the maximum depth of any node in the tree
 - The number of children emanating from a given node is referred to as its degree 
 
                    5
                 /     \    
				2		6
			  /   \
			 1     3 
 
 
 
Binary Search Tree (BST)

A binary search tree is a tree with one additional constraint — it keeps the elements in the tree in a particular order. 
Formally each node in the BST has two children (if any are missing we consider it a nil node), a left child and a right child. 
Nodes are rooted in place based on their values, with the smallest on the left and largest on the right.

Red-Black Tree:

A red-black tree is a balanced binary search tree with the following properties:
	1. Every node is colored red or black.
	2. Every leaf is a NIL node, and is colored black.
	3. If a node is red, then both its children are black.
	4. Every simple path from a node to a descendant leaf contains the same number of black nodes.
	5. Root note is always black node.
	
These constraints enforce a critical property of red–black trees: 

The path from the root to the farthest leaf is no more than twice as long as the path from the root to the nearest leaf. 
The result is that the tree is roughly height-balanced

On inserting a node, the resulting tree may violate the red-black properties. To reinstate the violated property, we use
  * Recolouring and/or
  * Rotation
 	- left: The right child of x (y) is not NIL 	
		 - Pivots around the link from x to y
		 - Makes y the new root of the subtree
		 - x becomes y’s left child
		 - y’s left child becomes x’s right child
		 
		     |                           |
		     X                           Y
		   /   \        ----->         /   \       
		 a      Y                     X     c
			  /   \                 /   \ 
			 b     c 	           a     b
		  	
	- right: The left child of y (x) is not NIL
		- Pivots around the link from y to x
		- Makes x the new root of the subtree
		- y becomes x’s right child
		- x’s right child becomes y’s left child
		
		|                                |
		Y                                X
	  /   \                            /   \
	 X     c            ----->        a     Y
   /   \                                  /   \
  a     b                                b     c	       	
	

NOTE: Please watch Red Black Tree - Part 0 & Red Black Tree - Part 1 videos.
      Due to constraint with in company n/w had to convert media files to .txt, can be played using VLC media player

	
 